// ------------------------------------
// ----------   Haigy Libs   ----------
// ------------------------------------

modulejs.define("lib/backbone_cache", ["haigy/lib/1.1.0/backbone_cache"], function(backboneCache) {
  return backboneCache;
});


modulejs.define("lib/cached_request", ["haigy/lib/1.1.0/cached_request"], function(cachedRequest) {
  return cachedRequest;
});


modulejs.define("lib/easy_form", ["haigy/lib/1.0.0/easy_form"], function(EasyForm) {
  return EasyForm;
});


modulejs.define("lib/key_value_cache", ["haigy/lib/1.1.0/key_value_cache"], function(KeyValueCache) {
  return KeyValueCache;
});


modulejs.define("lib/local_storage_cache", ["haigy/lib/1.1.0/local_storage_cache"], function(LocalStorageCache) {
  return LocalStorageCache;
});


modulejs.define("lib/validator", ["haigy/lib/1.0.0/validator"], function(validator) {
  return validator;
});



// ------------------------------------
// ----------    Wrappers    ----------
// ------------------------------------

modulejs.define("window", window);


modulejs.define("document", document);


modulejs.define("formdata", function() {
  return FormData;
});


modulejs.define("alerter", ["jquery", "app/constant", "haigy/lib/1.1.0/alerter"], function($, constant, alerter) {
  return function(alertMessage, okButtonLabel, alertTitle) {
    var noticeContainer = $(["#", constant.APP_LAYOUT_NOTICE_CONTAINER_HTML_ID].join(""));
    if (noticeContainer && noticeContainer.length > 0) {
      alerter(alertMessage, okButtonLabel, alertTitle, noticeContainer.get(0));
    } else {
      alert(alertMessage);
    }
  };
});


// usage:
// modulejs.require this module as "confirmer"
// var confirmerInstance = confirmer(confirmMessage, okCallbackFunc, cancelCallbackFunc, okButtonLabel, cancelButtonLabel);
// confirmerInstance.open();
// confirmerInstance.close();
modulejs.define("confirmer", ["jquery", "app/constant", "haigy/lib/1.1.0/confirmer"], function($, constant, Confirmer) {
  var confirmerInstance = null;

  return function(confirmMessage, okCallbackFunc, cancelCallbackFunc, okButtonLabel, cancelButtonLabel, confirmTitle) {
    var okCallback = okCallbackFunc || function() {};
    var cancelCallback = cancelCallbackFunc || function() {};

    if (confirmerInstance && confirmerInstance.hasDomContainerNode()) {
      confirmerInstance.setAttributes(confirmMessage, okCallback, cancelCallback, okButtonLabel, cancelButtonLabel, confirmTitle);
    } else {
      var noticeContainer = $(["#", constant.APP_LAYOUT_NOTICE_CONTAINER_HTML_ID].join(""));
      if (noticeContainer && noticeContainer.length > 0) {
        confirmerInstance = new Confirmer(noticeContainer.get(0), confirmMessage, okCallback, cancelCallback, okButtonLabel, cancelButtonLabel);
      } else {
        confirmerInstance = new Confirmer(null);
        if (confirm(confirmMessage)) {
          okCallback();
        } else {
          cancelCallback();
        }
      }
    }

    return confirmerInstance;
  };
});


modulejs.define("logger", ["underscore"], function(_) {
  _.bindAll(console, "log");
  return console.log;
});



// ------------------------------------
// ---------- 3rd Party Libs ----------
// ------------------------------------

modulejs.define("jquery", function () {
  return jQuery;
});


modulejs.define("underscore", function () {
  return _;
});


modulejs.define("backbone", function() {
  return Backbone;
});


modulejs.define("jst", function() {
  return JST;   // JST is generated by the rails gem "ejs"
});


modulejs.define("cordova", ["app/constant"], function(constant) {
  if (constant.IN_CORDOVA) {
    return cordova;
  } else {
    return null;
  }
});